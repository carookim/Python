# 파일 위치 : set_01.py

# 4] 집합

# set 집합, 중복을 제거하다
# 가변, 반복 가능, 인덱스 X, 순서 X
set_a = {1,2,3,1,2,3,1} # {} 중괄호
print(f'set_a = {set_a}')
print()
# 집합은 중복을 제거한다.
# 집합은 집합형태라, 순서가 상관이없고, 그래서 순서가 없다고 한다.

# set_a[0]
# set 객체는, 순서가 지원되지 않기 때문에 에러가 난다.

# 집합.메소드(1)
# 집합.add(x), 해당 되는 집합에 x값을 추가한다. 순서는 랜덤이다.
# 집합에서만 사용되는 메소드이다.
set_2 = {1,2}
print(set_2)
set_2.add(3)
print(set_2)
print()

# 집합.메소드(2)
# 집합.remove(x), 해당되는 값중에 x 값을 삭제한다.
# 원래 .remove()는 다른 자료형(리스트)에서는 겹치는 값들이 있더라도 첫번째 값을 삭제하는데,
# 집합은 중복이 안되서 어차피 값은 한개씩만 있고, 그래서 한개만 삭제된다.
# 그래서 집합에서 어떤요소를 삭제할때는 .remove()를 사용한다.
# 없는 값을 삭제하려하면 에러가 뜬다. 
# 집합과 리스트에서 사용되는 메소드이다.
print(set_2)
set_2.remove(2)
print(set_2)
print()

# 집합.메소드(3)
# 집합.pop(), 셋 내부의 값중에서 무작위 값을 삭제하고 반환한다.
# 빈셋에서 .pop()을 사용하여 셋내부의 값을 삭제하려하면 에러가 뜬다.
# 집합, 리스트, 딕셔너리에서 사용되는 메소드이다. (조금씩 다름)
print(set_2)
set_2.pop()
print(set_2)
print()

# 집합.메소드(4)
# 집합.update(iterable), ^iterable(반복 가능한 객체)를 받아서, 그 안의 원소들을 각각 set에 추가합니다.
# 이미 존재하는 값은 중복되지 않고 무시됩니다.
# 집합과 리스트에서 사용되는 메소드이다.
print(set_2)
set_2.update([1,2,3])
print(set_2)
set_2.update((4,5,3))
print(set_2)
print()

# 여기서 새로 배운 함수 : 집합.메소드 함수

# 집합.메소드 함수
# .add()
# .remove()
# .pop()
# .update(iterable)