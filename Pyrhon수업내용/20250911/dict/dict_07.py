list_a = ['사과','포도','딸기']
for i in enumerate(list_a): # 리스트를 튜플 형태로 인덱스와 해당하는 값을 반환하게 한다.
    print(i)                # 리스트 말고 튜플 딕셔너리, 다른 애들한테 적용하면 어떻게 나오는지 아래 (^0_1참고) ^0
    print(i[0], i[1])
# enumerate()로 값을 반환 받고, 언패킹을 해서 사용한다. -> 어쩔때 이런걸 사용하는 거지? ^
# enumerate()랑 언패킹이랑 무슨차이야? ^강사님찬스
# 언패킹에 대해서 더 구체적으로 알아보기, 자료형별로 언패킹을 하는 법 + 패킹 하는 법 업데이트 하기 ^
# enumerate()를 다른 리스트나 딕셔너리나 그런데에 사용하면 어떻게 되는지 ^0_1
# 문자열,리스트,튜플 / 딕셔너리 / 세트

# 리스트/튜플/문자열 → 순서가 있으니 (인덱스, 원소) 반환

# 딕셔너리 → 기본은 (인덱스, 키) 반환, items() 쓰면 (인덱스, (키,값))

# 세트 → 순서가 없어서 인덱스는 붙지만, 순서가 실행마다 다를 수 있음

a,b = (0,'포도')
print(b)

list_a = ['사과','포도','딸기']
for idx,data in enumerate(list_a):
    print(f'idx = {idx}, data = {data}')

# zip()
# 두개의 리스트 또는 집합을 각 원소별로 묶어준다.
# 그렇게 해서 리스트? 튜플? 딕셔너리? ^0
# 정말 말그대로 각원소를 (원하는대로) 묶어주는 함수
names = ['홍길동','이순신']
ages = [25,35]
print(zip(names,ages)) # 이렇게 해서는 출력이 안나온다.
print(list(zip(names,ages))) # list로 형변환으로 묶어서 출력해보니 zip이 튜플로 출력된다.
print(dict(zip(names,ages))) # dict로 하니, 저절로 딕셔너리로 묶어서 출력된다.

for name,age in zip(names,ages):
    print(f'name:{name}, age:{age}')

# .items()
dict_1 = {'취미' : '수영', '좋아하는 음식' : '떡볶이'}
print(dict_1)
print(dict_1.keys()) # 리스트로 키값이 담아져나오고, 그위에 dict_keys()로 감싸져 있다.
print(dict_1.values()) # 리스트로 밸류값이 담아져나오고, 그위에 dict_values()로 감싸져 있다.
print(dict_1.items()) # 튜플로 (키,밸류) 형식으로 만들고, 그위에 리스트로 감싸고, dict_items()로 감싸져 있다.
# >>
# 반환값 특징
# 1) 리스트는 아님
# 하지만 반복(iterable) 가능 → for문에서 바로 사용 가능

# for k in dict_1.keys():
#     print(k)


# 2) 원본 딕셔너리와 연결

# 원본 딕셔너리가 바뀌면 뷰 객체도 자동으로 반영

# keys_view = dict_1.keys()
# dict_1['특기'] = '코딩'
# print(keys_view)  # dict_keys(['취미', '좋아하는 음식', '특기'])


# 3) 필요하면 리스트/튜플로 변환 가능

# print(list(dict_1.keys()))    # ['취미', '좋아하는 음식', '특기']
# print(tuple(dict_1.values())) # ('수영', '떡볶이', '코딩')

# {'취미': '수영', '좋아하는 음식': '떡볶이'}
# dict_keys(['취미', '좋아하는 음식'])
# dict_values(['수영', '떡볶이'])
# dict_items([('취미', '수영'), ('좋아하는 음식', '떡볶이')])

# 이렇게 나오는데 dict_keys이런게 반환할때 값은 지워진 상태로 들어가는 건지? ^0
# 그니깐 값이 저상태로 나오는데 함수에 집어 넣어도 되는지,
# 함수에 넣는 것에는 문제가 크게없어 보이나, 인덱스를 입력하여 지정하는 건 불가하므로 그렇게 하고싶다면
# 인덱싱이 지원되는 list, 튜플, 문자열로 변환하여 사용하면된다.