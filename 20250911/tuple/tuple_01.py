def change(obj):
    obj[0] = 100

data = [1,2,3]

change(data)
print(data)

# 여기서 는 b의 값을 바꿔도 변경되지 않는 이유 ^
a = 10
b= a
b= 13
print(f'a : {a}, b :{b}')
print()

# 리스트 를 복사한다고
list_a = [1,2,3]
list_b = list_a
# 을 사용하지만 이건 데이터를 별도로 복사하여 list_b에 부여하는 게아니라,
# 기존 연결된 list_a의 데이터 [1,2,3]주소지를 list_b에 부여하는 방식이다.
list_b[0] = 100
print(f'list_a : {list_a},list_b :{list_b}')
# 그래서 원본 값이 수정이 된다.

# 그래서 리스트를 복사하고싶으면
list_b == list_a.copy()
# 이렇게 적으면 된다.

# 왜 리스트는 주소를 복사하고 정수는 복사를 하는지?
# 리스트는 가변성을 가지고 있어서 이와같은 딕셔너리,리스트,셋 같은 경우 사용될때 연동이 되라고 그렇게 처리하는 것.
# 정수는 불변성을 가지고 있어서 이와같은 문자열,정수,실수,튜플 같은 경우 사용될 때 복사가 되는 것

# 가변객체(리스트, 딕셔너리, 셋)은 주소(참조)를 복사한다.
# 가변 객체는 내용이 바뀔 수 있기 때문에,
# 주소를 공유함으로써 메모리 효율을 높이고, 의도적으로 객체 간 연동을 가능하게 한다.

# 불변객체(문자열, 실수, 튜플)은 값을 복사한다.
# 불변 객체는 내용을 절대 바꿀 수 없기 때문에,
# 복사해도 서로 간섭이 없고, 독립적인 값처럼 안전하게 사용할 수 있다.

# 튜플의 이유